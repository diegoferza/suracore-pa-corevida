group 'sura'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
    maven {
        url "https://plugins.gradle.org/m2/"
    }
}

buildscript {
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath("net.serenity-bdd:serenity-gradle-plugin:2.0.75")
    }
}

apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'idea'
apply plugin: 'net.serenity-bdd.aggregator'

ext{
    serenityVersion = '2.0.39'
    serenityCucumberVersion = '1.0.5'
    cucumberVersion = '4.2.0'
}

configurations.all {
    resolutionStrategy {
        force "io.cucumber:cucumber-core:4.2.0"

    }
}

dependencies {
    compile             "net.serenity-bdd:serenity-core:$rootProject.ext.serenityVersion"
    compile             "net.serenity-bdd:serenity-cucumber4:$rootProject.ext.serenityCucumberVersion"
    compile             "io.cucumber:cucumber-core:$rootProject.ext.cucumberVersion"
    compile             "io.cucumber:cucumber-junit:$rootProject.ext.cucumberVersion"
    compile             group: 'net.serenity-bdd', name: 'serenity-rest-assured', version: '2.0.39'
    compile             group: 'com.imalittletester', name: 'thewaiter', version: '1.0'
    compile             group: 'net.serenity-bdd', name: 'serenity-gradle-plugin', version: '2.0.90'
    compile             group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.11.0'
    compileOnly         'org.projectlombok:lombok:1.18.12'
    annotationProcessor 'org.projectlombok:lombok:1.18.12'

}


test {
    maxParallelForks = Runtime.runtime.availableProcessors()
}

configurations {
    cucumberRuntime.extendsFrom testRuntime
}

task cucumber() {
    dependsOn assemble, compileTestJava
    doLast {
        javaexec {
            main = "cucumber.api.cli.Main"
            classpath = configurations.cucumberRuntime + sourceSets.main.output + sourceSets.test.output
            args = ['--plugin', 'pretty', '--glue', 'com.sura.pruebascorevida.definitions', 'src/test/resources/features']
        }
    }
}

task icTest(type: Test) {
    def env = (System.getProperty('env') ?: "local").trim()
    def app = (System.getProperty('app') ?: "oipa").trim()
    def testType = (System.getProperty('testType') ?: "pruebasintegracion").trim()
    def productProject=(System.getProperty('productProject') ?: "arl").trim()
    def propertyValue = project.property("${app}TestFilter").toString().trim()
    def filterRute = "*.runners.$env.$productProject.${propertyValue}.${testType}*"
    logger.lifecycle("Variables OK de ejecucion para icTest")
    logger.lifecycle("env:$env, app:$app, tipoPrueba:$testType, propertyValue:$propertyValue, filterRute:$filterRute")
    env = (System.getProperty('infraType')=='aws'?"${env}aws":"${env}").trim()
    logger.lifecycle("Nueva declaracion -> env:$env, app:$app, tipoPrueba:$testType, propertyValue:$propertyValue, filterRute:$filterRute")

    System.setProperty('env',env)
    systemProperties = ['env': env]
    filter {
        includeTestsMatching filterRute
        failOnNoMatchingTests = false
    }
    maxParallelForks = Runtime.runtime.availableProcessors()
}

wrapper {
    gradleVersion = '5.5'
}

sourceCompatibility = 1.8
compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'
javadoc.options.encoding = 'UTF-8'
gradle.startParameter.continueOnFailure = true

